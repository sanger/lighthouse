name: Automated build, test, release and push

on:
  push:
    branches:
      - develop
      - master

env:
  IMAGE_NAME: ${{ github.repository }}/${{ github.event.repository.name }}

jobs:
  build_test_release_push:
    runs-on: ubuntu-18.04
    services:
      mongodb:
        image: mongo:4.2.5
        ports:
          - 27017:27017

      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: null
          MYSQL_DATABASE: unified_warehouse_test

      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: MyS3cr3tPassw0rd

    steps:
      - uses: actions/checkout@v2

      - name: Build and tag the image for testing and release
        run: >-
          docker build .
          --file Dockerfile
          --tag docker.pkg.github.com/${IMAGE_NAME}:${GITHUB_REF##*/}

      - name: Create SQL Server testing database
        run: >-
          docker run
          --network host
          --env EVE_SETTINGS=test.py
          --entrypoint ''
          docker.pkg.github.com/${IMAGE_NAME}:${GITHUB_REF##*/}
          pipenv run python setup_sqlserver_test_db.py

      - name: Setup the test MLWH and Events databases
        run: >-
          docker run
          --network host
          --env EVE_SETTINGS=test.py
          --entrypoint ''
          docker.pkg.github.com/${IMAGE_NAME}:${GITHUB_REF##*/}
          pipenv run python setup_test_db.py

      - name: Run tests against the image
        run: >-
          docker run
          --network host
          --env EVE_SETTINGS=test.py
          --entrypoint ''
          docker.pkg.github.com/${IMAGE_NAME}:${GITHUB_REF##*/}
          pipenv run python -m pytest --no-cov -vx

      - name: Set release tag
        # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        run: echo "RELEASE_VERSION=$([ ${GITHUB_REF##*/} = "develop" ] && printf '%s\n' $(cat .release_version)-develop || printf '%s\n' $(cat .release_version))" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: ${{ !(github.ref == 'refs/heads/master') }}

      - name: Login to registry
        run: >-
          docker login
          -u ${{ github.actor }}
          -p ${{ secrets.GITHUB_TOKEN }}
          docker.pkg.github.com

      - name: Tag image with release version
        run: >-
          docker tag
          docker.pkg.github.com/${IMAGE_NAME}:${GITHUB_REF##*/}
          docker.pkg.github.com/${IMAGE_NAME}:${{ env.RELEASE_VERSION }}

      - name: Push all tagged images in the repository
        run: >-
          docker push --all-tags
          docker.pkg.github.com/${IMAGE_NAME}
